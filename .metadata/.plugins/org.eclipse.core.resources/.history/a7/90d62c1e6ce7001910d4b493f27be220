package com.agendamento.controller;


import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.agendamento.models.Usuario;
import com.agendamento.services.UsuarioService;

@RestController
@RequestMapping("/usuario")
public class UsuarioController {

	@Autowired
	private UsuarioService usuarioService;


	@RequestMapping("/cadastrar")
	public ModelAndView exibir(){
		ModelAndView modelAndView = new ModelAndView("cadastrar.html");
		return modelAndView;
	}
	@GetMapping("/{id}")
	public ResponseEntity<Usuario> buscarPeloID(@PathVariable Integer id) {
		try {
			Usuario usuario = usuarioService.pegarPorID(id);
			return ResponseEntity.ok(usuario);
		}catch(Exception e ){
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
	}

	@GetMapping("/mostrar")
	public ResponseEntity<?> pesquisar() {
		if ( usuarioService.quantidadeUsuario() > 0 ) {
			return ResponseEntity.ok(usuarioService.mostrarTodos());
		}
		return ResponseEntity.noContent().build();
	}



	@DeleteMapping("/{id}")
	public ResponseEntity<?> deletar(@PathVariable int id, Usuario usuario) {
		try{
			usuarioService.deletar(id);
			return ResponseEntity.ok().build();
		}catch(Exception e) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
	}

	@PostMapping
	public ResponseEntity<?> salvar(@RequestBody Usuario usuario) {
		try { 
			usuarioService.salvar(usuario);
			return ResponseEntity.status(HttpStatus.CREATED).body(usuario);
		}catch(Exception e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();

		}
	}

	@PutMapping("/{id}")
	public ResponseEntity<?> atualizar (@PathVariable int id,@Valid @RequestBody Usuario usuario){
		try {
			usuarioService.atualizar(usuario, id);
			return ResponseEntity.ok().build();
		}catch(Exception e) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
	}
}
